name: ♻️ Regenerate a Roundup Issue

on:
  workflow_dispatch:
    inputs:
      issue_no:
        type: number
        required: true

concurrency:
  group: "generate-pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:

  generate:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    outputs:
      issue_no: ${{ steps.issue.outputs.issue_no }}
      issue_id: ${{ steps.issue.outputs.issue_id }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Grab Issue Comments
      id: issue
      run: |
        RUIssue="$(gh api graphql -f query='
          query getRepoByTitle {
            search(query: """repo:AxolStudio/STLGameDevRoundUp in:title #${{ inputs.issue_no }}""", type:ISSUE, first: 1 ) {
              nodes {
                ... on Issue {
                  title
                  number
                }
              }
            }
          }
        ')"
        
        issue_id=$(echo $RUIssue | jq -r '.data.search.nodes[0].number')
        echo 'issue_id'=$issue_id >> $GITHUB_OUTPUT
        issue_title=$(echo $RUIssue | jq -r '.data.search.nodes[0].title')
        ru_no="${issue_title##*#}"
        save_to="data/issue${ru_no}.json"
        mkdir -p data
        
        RUIssueComments="$(gh api graphql -F owner=$OWNER -F name=$REPO -F id=${issue_id} -f query='
            query($name: String!, $owner: String!, $id: Int!) {
                repository(name: $name, owner: $owner) {
                    issue(number: $id) { 
                      comments(first:100) {
                          nodes {
                              body
                          }
                      } 
                    }
                }
            }
        ')"
        echo $RUIssueComments;
        echo $RUIssueComments | jq -r '.data.repository.issue.nodes[] | with_entries( select(.comments | startswith("{")))' > $save_to
        echo 'ISSUE_NO'=$ru_no >> $GITHUB_ENV
        echo 'issue_no'=$ru_no >> $GITHUB_OUTPUT
        md_file="content/issue-${ru_no}.md"
        cat << EOF >> $md_file
        ---
        title: "Issue #$ru_no"
        date: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
        draft: false
        no: $ru_no
        ---
        EOF
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        OWNER: ${{ github.repository_owner }}
        REPO: ${{ github.event.repository.name }}
    - name: Commit change
      run: "git config --global user.name \"GitHub Actions\"\ngit config --global user.email \"no-reply@github.com\"\ngit tag generated-issue-${ISSUE_NO}\ngit add content/issue-${ISSUE_NO}.md data/issue${ISSUE_NO}.json\ngit commit -m \"Update issue ${ISSUE_NO}\"\ngit remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}\ngit push --follow-tags \n"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_NO: ${{ env.ISSUE_NO }}

  build:
    uses: ./.github/workflows/hugo-build.yaml
    needs: generate

  screenshot:
    needs: [generate, build]
    uses: ./.github/workflows/generate-screenshot.yaml
    with:
      issue_no: ${{ needs.generate.outputs.issue_no }}
      issue_id: ${{ needs.generate.outputs.issue_id }}
      base_url: ${{ needs.build.outputs.base_url }}
